[gd_resource type="VisualShader" load_steps=22 format=2]

[ext_resource path="res://environment/tile_sets/water_tile_mask.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 0.02 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 5.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=8]

[sub_resource type="VisualShaderNodeVectorDecompose" id=9]

[sub_resource type="VisualShaderNodeTexture" id=10]
source = 2
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=12]
constant = 6.283

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 0

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=17]

[sub_resource type="VisualShaderNodeScalarOp" id=18]

[sub_resource type="VisualShaderNodeVectorCompose" id=19]

[sub_resource type="VisualShaderNodeScalarOp" id=20]

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_13;



void vertex() {
// Output:0

}

void fragment() {
// Input:17
	vec3 n_out17p0 = vec3(UV, 0.0);

// VectorDecompose:18
	float n_out18p0 = n_out17p0.x;
	float n_out18p1 = n_out17p0.y;
	float n_out18p2 = n_out17p0.z;

// Input:3
	float n_out3p0 = TIME;

// ScalarOp:12
	float n_in12p1 = 5.00000;
	float n_out12p0 = n_out3p0 * n_in12p1;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// VectorDecompose:6
	float n_out6p0 = n_out5p0.x;
	float n_out6p1 = n_out5p0.y;
	float n_out6p2 = n_out5p0.z;

// Scalar:22
	float n_out22p0 = 6.283000;

// ScalarOp:16
	float n_out16p0 = n_out6p0 * n_out22p0;

// ScalarOp:23
	float n_in23p1 = 2.00000;
	float n_out23p0 = n_out16p0 * n_in23p1;

// ScalarOp:9
	float n_out9p0 = n_out12p0 + n_out23p0;

// ScalarFunc:4
	float n_out4p0 = sin(n_out9p0);

// ScalarOp:10
	float n_in10p1 = 0.02000;
	float n_out10p0 = n_out4p0 * n_in10p1;

// Input:20
	vec3 n_out20p0 = vec3(UV, 0.0);

// Texture:13
	vec4 tex_frg_13_read = texture(tex_frg_13, n_out20p0.xy);
	vec3 n_out13p0 = tex_frg_13_read.rgb;
	float n_out13p1 = tex_frg_13_read.a;

// VectorDecompose:14
	float n_out14p0 = n_out13p0.x;
	float n_out14p1 = n_out13p0.y;
	float n_out14p2 = n_out13p0.z;

// ScalarOp:15
	float n_out15p0 = n_out10p0 * n_out14p0;

// VectorDecompose:19
	float n_out19p0 = n_out20p0.x;
	float n_out19p1 = n_out20p0.y;
	float n_out19p2 = n_out20p0.z;

// ScalarOp:7
	float n_out7p0 = n_out15p0 + n_out19p1;

// VectorCompose:8
	float n_in8p2 = 0.00000;
	vec3 n_out8p0 = vec3(n_out18p0, n_out7p0, n_in8p2);

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out8p0.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -669, -73.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1400, 180 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 1200, 180 )
nodes/fragment/3/node = SubResource( 14 )
nodes/fragment/3/position = Vector2( -240, 40 )
nodes/fragment/4/node = SubResource( 15 )
nodes/fragment/4/position = Vector2( 360, 60 )
nodes/fragment/5/node = SubResource( 16 )
nodes/fragment/5/position = Vector2( -600, 200 )
nodes/fragment/6/node = SubResource( 17 )
nodes/fragment/6/position = Vector2( -440, 200 )
nodes/fragment/7/node = SubResource( 18 )
nodes/fragment/7/position = Vector2( 900, 60 )
nodes/fragment/8/node = SubResource( 19 )
nodes/fragment/8/position = Vector2( 1140, 60 )
nodes/fragment/9/node = SubResource( 20 )
nodes/fragment/9/position = Vector2( 180, 60 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 560, 60 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -60, 40 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 320, 300 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 500, 240 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 740, 60 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( -220, 200 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 700, -40 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 860, -40 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( 740, 180 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( 180, 180 )
nodes/fragment/22/node = SubResource( 12 )
nodes/fragment/22/position = Vector2( -440, 320 )
nodes/fragment/23/node = SubResource( 13 )
nodes/fragment/23/position = Vector2( -20, 200 )
nodes/fragment/connections = PoolIntArray( 5, 0, 6, 0, 8, 0, 2, 0, 2, 0, 0, 0, 2, 1, 0, 1, 3, 0, 12, 0, 12, 0, 9, 0, 13, 0, 14, 0, 14, 0, 15, 1, 15, 0, 7, 0, 7, 0, 8, 1, 17, 0, 18, 0, 18, 0, 8, 0, 20, 0, 19, 0, 6, 0, 16, 0, 4, 0, 10, 0, 10, 0, 15, 0, 19, 1, 7, 1, 20, 0, 13, 0, 22, 0, 16, 1, 16, 0, 23, 0, 23, 0, 9, 1, 9, 0, 4, 0 )
